# -*- coding: utf-8 -*-
import discord
from discord.ext import commands, tasks
import json
import os
from datetime import datetime, timedelta

# ====================== 設定 ======================
DEBUG = True  # デバッグ用なら True、本番は False

if DEBUG:
    CHECK_INTERVAL = 5         # チェック間隔（秒）
    REMOVE_AFTER = 10          # 削除までの期間（秒）
else:
    CHECK_INTERVAL = 60*60*2   # 2時間
    REMOVE_AFTER = 60*60*24*30*3  # 3か月（秒）

ROLES_TO_AUTO_REMOVE = ["注意", "警告"]
DATA_FILE = "roles_data.json"
COMMAND_PREFIX = "!"

# ====================== Bot 初期化 ======================
intents = discord.Intents.default()
intents.members = True
intents.message_content = True
bot = commands.Bot(command_prefix=COMMAND_PREFIX, intents=intents)

# ====================== データ操作 ======================
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

role_data = load_data()  # {guild_id: {user_id: {role_name: timestamp}}}

# ====================== 自動削除処理 ======================
@tasks.loop(seconds=CHECK_INTERVAL)
async def check_roles():
    now = datetime.utcnow().timestamp()
    for guild in bot.guilds:
        g_id = str(guild.id)
        if g_id not in role_data:
            continue
        for user_id, roles in list(role_data[g_id].items()):
            member = guild.get_member(int(user_id))
            if not member:
                continue
            for role_name, ts in list(roles.items()):
                if role_name not in ROLES_TO_AUTO_REMOVE:
                    continue
                if now - ts >= REMOVE_AFTER:
                    role = discord.utils.get(guild.roles, name=role_name)
                    if role and role in member.roles:
                        try:
                            await member.remove_roles(role)
                            print(f"{member.name} から {role_name} を削除しました")
                        except discord.Forbidden:
                            print(f"{member.name} から {role_name} の削除に失敗しました（権限不足）")
                    # 削除したのでデータも削除
                    del role_data[g_id][user_id][role_name]
            if not role_data[g_id][user_id]:
                del role_data[g_id][user_id]
    save_data(role_data)

async def add_role_with_timestamp(member, role):
    guild_id = str(member.guild.id)
    user_id = str(member.id)
    if guild_id not in role_data:
        role_data[guild_id] = {}
    if user_id not in role_data[guild_id]:
        role_data[guild_id][user_id] = {}
    role_data[guild_id][user_id][role.name] = datetime.utcnow().timestamp()
    save_data(role_data)
    await member.add_roles(role)

# ====================== Bot イベント ======================
@bot.event
async def on_ready():
    print(f"Logged in as {bot.user}")
    await bot.change_presence(
        status=discord.Status.online,
        activity=discord.Game("稼働中")
    )
    check_roles.start()

# ====================== コマンド ======================
@bot.command()
@commands.has_permissions(administrator=True)
async def giveall(ctx, role: discord.Role):
    msg = await ctx.send("処理を開始します...")
    failed = []
    for member in ctx.guild.members:
        try:
            await add_role_with_timestamp(member, role)
        except discord.Forbidden:
            failed.append(member.name)
        except discord.HTTPException:
            failed.append(member.name)
    text = f"{ctx.guild.member_count - len(failed)}人にロールを付与しました。"
    if failed:
        text += f"\n付与に失敗した人: {', '.join(failed)}"
    await msg.edit(content=text)

@bot.command()
@commands.has_permissions(administrator=True)
async def test_add(ctx, role: discord.Role):
    """デバッグ用: 自分にロール付与"""
    await add_role_with_timestamp(ctx.author, role)
    await ctx.send(f"{ctx.author.name} に {role.name} を付与しました（デバッグ用）")

# ====================== Bot 実行 ======================
bot.run("YOUR_TOKEN_HERE")
